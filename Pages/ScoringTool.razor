@page "/ScoringTool"
@inject ScoreToolState scoreToolState
@inject IJSRuntime JS


<PageTitle>Pattern Scoring Tool</PageTitle>

<script>
	function vibrateOnButtonPress() {
		if (!window) {
			return;
		}

		if (!window.navigator) {
			return;
		}

		if (!window.navigator.vibrate) {
			return;
		}

		window.navigator.vibrate(100);
	}

	function vibrateOnResetPress() {
		if (!window) {
			return;
		}

		if (!window.navigator) {
			return;
		}

		if (!window.navigator.vibrate) {
			return;
		}

		window.navigator.vibrate(150, 50, 150);
	}
</script>

<RadzenRow Gap="0.2rem">
	<RadzenColumn>
		<RadzenStack Style="height: 100%" Gap="1.0rem">
			<RadzenButton Text="-0.2" Style="background-color: #9a0000; height: 80%; font-size: 30px" Click=@(args => OnDeductClick(false)) class="disable-dbl-tap-zoom" />
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center">
				<RadzenRow AlignItems="AlignItems.Center" Style="vertical-align: middle;">
					<RadzenSwitch Name="HongZeroCheckbox" TValue="bool" @bind-Value=@hongZero Change=@OnHongZeroClick Style="vertical-align: middle;" />
					<RadzenLabel Text="Zero" Component="HongZeroCheckbox" Style="vertical-align: middle;" />
				</RadzenRow>
				<RadzenButton Text="+0.2" Style="float: right; position: relative; right: 0px" ButtonStyle="ButtonStyle.Success" Click=@(args => OnUndoDeductClick(false)) class="disable-dbl-tap-zoom" />
			</RadzenStack>
		</RadzenStack>
	</RadzenColumn>
	<RadzenColumn Style="text-align: center">
		<RadzenRow JustifyContent="Radzen.JustifyContent.Center" Gap="0.6rem">
			<RadzenSelectBar TValue="int" Size="ButtonSize.Small" @bind-Value="@selectedRound" Change="@(args => UpdateZeroCheckboxs())">
				<Items>
					<RadzenSelectBarItem Value="1" Text="Round 1" />
					<RadzenSelectBarItem Value="2" Text="Round 2" />
				</Items>
			</RadzenSelectBar>
		</RadzenRow>
		<RadzenRow JustifyContent="Radzen.JustifyContent.Center" Style="margin: 10px">
			<RadzenButton Text="Reset" Shade="Radzen.Shade.Default" ButtonStyle="Radzen.ButtonStyle.Warning" Click="@(args => OnResetClick())" />
		</RadzenRow>
		<RadzenRow JustifyContent="Radzen.JustifyContent.Center" Style="margin: 10px">
			<table style="text-align: left; margin: 3px; vertical-align: central">
				<tr style="border-bottom: 1px solid #808080">
					<th></th>
					<th style="padding: 5px; text-align: center"><RadzenText TextStyle="TextStyle.Overline">Hong</RadzenText></th>
					<th style="padding: 5px; text-align: center"><RadzenText TextStyle="TextStyle.Overline">Chong</RadzenText></th>
				</tr>
				<tr>
					<td><RadzenText TextStyle="TextStyle.Overline">R1</RadzenText></td>
					<td style="text-align: center">@(scoreToolState.RoundScores[0].GetEffectiveHongScore().ToString("0.0"))</td>
					<td style="text-align: center">@(scoreToolState.RoundScores[0].GetEffectiveChongScore().ToString("0.0"))</td>
				</tr>
				<tr>
					<td><RadzenText TextStyle="TextStyle.Overline">R2</RadzenText></td>
					<td style="text-align: center">@(scoreToolState.RoundScores[1].GetEffectiveHongScore().ToString("0.0"))</td>
					<td style="text-align: center">@(scoreToolState.RoundScores[1].GetEffectiveChongScore().ToString("0.0"))</td>
				</tr>

				<tr style="border-top: 1px solid #808080; border-bottom: 1px solid #808080">
					<td style="font-style: italic;"></td>
					<td style="text-align: center; font-style: italic">@(scoreToolState.GetTotalHongScore().ToString("0.0"))</td>
					<td style="text-align: center; font-style: italic">@(scoreToolState.GetTotalChongScore().ToString("0.0"))</td>
				</tr>
			</table>
		
	</RadzenRow>
	</RadzenColumn>
	<RadzenColumn>
		<RadzenStack Style="height: 100%" Gap="1.0rem">
			<RadzenButton Text="-0.2" Style="background-color: #0006c8; height: 80%; font-size: 30px" Click=@(args => OnDeductClick(true)) class="disable-dbl-tap-zoom" />
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="Radzen.AlignItems.Center">
				<RadzenRow AlignItems="AlignItems.Center" Style="vertical-align: middle;">
					<RadzenSwitch TValue="bool" @bind-Value=@chongZero Change=@OnChongZeroClick Name="ChongZeroCheckbox" Style="vertical-align: middle;" />
					<RadzenLabel Text="Zero" Component="ChongZeroCheckbox" Style="vertical-align: middle;" />
				</RadzenRow>
				<RadzenButton Text="+0.2" Style="float: right; position: relative; right: 0px" ButtonStyle="ButtonStyle.Success" Click=@(args => OnUndoDeductClick(true)) class="disable-dbl-tap-zoom" />
			</RadzenStack>
		</RadzenStack>
	</RadzenColumn>
</RadzenRow>
<p />
<p />
<div class="rotate-device-warning">
	<p><b>Mobile users:</b> For the best experience, please hold your device in the landscape orientation.</p>
</div>


@code {

	private bool hongZero = false;
	private bool chongZero = false;
	private int selectedRound = 1;

	private async Task OnDeductClick(bool IsChong)
	{
		scoreToolState.RoundScores[selectedRound - 1].Deduct(IsChong);
		await JS.InvokeVoidAsync("vibrateOnButtonPress");
	}

	private async Task OnUndoDeductClick(bool IsChong)
	{
		scoreToolState.RoundScores[selectedRound - 1].UndoDeduct(IsChong);
		await JS.InvokeVoidAsync("vibrateOnButtonPress");
	}

	private async Task OnHongZeroClick()
	{
		scoreToolState.RoundScores[selectedRound - 1].IsHongZero = hongZero;
		await JS.InvokeVoidAsync("vibrateOnButtonPress");
	}

	private async Task OnChongZeroClick()
	{
		scoreToolState.RoundScores[selectedRound - 1].IsChongZero = chongZero;
		await JS.InvokeVoidAsync("vibrateOnButtonPress");
	}

	private async Task OnResetClick()
	{
		// reset both rounds - could just reset the selected round though if desired
		//scoreToolState.RoundScores[selectedRound - 1].ResetScores();
		scoreToolState.RoundScores[0].ResetScores();
		scoreToolState.RoundScores[1].ResetScores();

		selectedRound = 1;          // set round selector back to first round - https://github.com/nikki-amiefong/ITFPatternTraining/issues/4

		UpdateZeroCheckboxs();
		
		await JS.InvokeVoidAsync("vibrateOnResetPress");
	}

	private void UpdateZeroCheckboxs()
	{
		hongZero = scoreToolState.RoundScores[selectedRound - 1].IsHongZero;
		chongZero = scoreToolState.RoundScores[selectedRound - 1].IsChongZero;
	}

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(UpdateZeroCheckboxs);
	}

}
